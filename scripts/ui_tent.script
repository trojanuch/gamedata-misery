----------------------------------------------------------------------------
-- Tent UI, Items refunct mod by Plaargath, based on previous work by MDT --
----------------------------------------------------------------------------
class "load_item" (CUIListBoxItem)
function load_item:__init(height) super(height)
	self.file_name = "filename"
	self:SetTextColor(GetARGB(255, 170, 170, 170))
	self.fn = self:GetTextItem()
	self.fn:SetFont(GetFontLetterica18Russian())
	self.fn:SetEllipsis(true)
end
function load_item:__finalize()
end
-------------------------------------------------------------------
class "tent_ui" (CUIScriptWnd)
local feedback1, feedback2
local has_tent_fabric, has_tent_mat, has_protection, missing_two
function tent_ui:__init(owner,section) super()
	self.owner = owner
	self.section = section
	local ini = ini_file("plugins\\itms_manager.ltx")
	self.tent_support = alun_utils.collect_section(ini,"tent_support",true)
	self.tent_tools = alun_utils.collect_section(ini,"tent_tools",true)

	if self.section == "tarpaulin" then
		has_tent_fabric = true
		if db.actor:object("beadspread") then
			has_tent_mat = true
		end
		if db.actor:object("nrc_foil") then
			has_protection = true
		end
	end
	if self.section == "beadspread" then
		has_tent_mat = true
		if db.actor:object("tarpaulin") then
			has_tent_fabric = true
		end
		if db.actor:object("nrc_foil") then
			has_protection = true
		end
	end
	if self.section == "nrc_foil" then
		has_protection = true
		if db.actor:object("tarpaulin") then
			has_tent_fabric = true
		end
		if db.actor:object("beadspread") then
			has_tent_mat = true
		end
	end
	if not has_tent_fabric and not has_tent_mat then missing_two = true end
	if not has_tent_fabric and not has_protection then missing_two = true end
	if not has_tent_mat and not has_protection then missing_two = true end

	self:InitControls()
	self:InitCallBacks()
end

function tent_ui:__finalize()
end

function tent_ui:FillSupportList()
	self.list_box_parts:RemoveAll()
	if self.list_box:GetSize()==0 then return end

	local item = self.list_box:GetSelectedItem()
	if not (item) then return end

	local function fill_support_list(actor,obj)
		if (obj) then
			if self.tent_support[obj:section()] then
				self:AddItemToList(obj,self.list_box_parts)
			end
		end
	end
	db.actor:iterate_inventory(fill_support_list,db.actor)
end

function tent_ui:FillToolsList()
	self.list_box:RemoveAll()
	local function fill_tent_tools_list(actor,obj)
		if (obj) then
			if self.tent_tools[obj:section()] then
				self:AddItemToList(obj,self.list_box)
			end
		end
	end
	db.actor:iterate_inventory(fill_tent_tools_list,db.actor)
	if not has_tent_fabric then self.caption_down:SetText("%c[0,151,21,66]tent fabric needed") end
	if not has_tent_mat then self.caption_down:SetText("%c[0,151,21,66]tent mat needed") end
	if not has_protection then self.caption_down:SetText("%c[0,151,21,66]protection foil needed") end
	if missing_two then self.caption_down:SetText("%c[0,151,21,66]components missing") end
end

function tent_ui:InitControls()
	self:SetWndRect (Frect():set(0,0,1024,768))
	self:SetAutoDelete(true)
	self.xml = CScriptXmlInit()
	local ctrl
	self.xml:ParseFile ("ui_itm_main.xml")
	ctrl = CUIWindow()
	self.xml:InitWindow ("itm_tent:file_item:main",0,ctrl)
	self.file_item_main_sz = vector2():set(ctrl:GetWidth(),ctrl:GetHeight())
	self.xml:InitWindow ("itm_tent:file_item:fn",0,ctrl)
	self.file_item_fn_sz = vector2():set(ctrl:GetWidth(),ctrl:GetHeight())
	self.xml:InitWindow ("itm_tent:file_item:fd",0,ctrl)
	self.file_item_fd_sz = vector2():set(ctrl:GetWidth(),ctrl:GetHeight())
	self.form = self.xml:InitStatic("itm_tent:form",self)
	self.form:SetWndPos(vector2():set(0, 0))

	-- tent fabric icon
	if has_tent_fabric then
		self.pic = self.xml:InitStatic("itm_tent:form:icon_tool",self.form)
		self.picture = self.xml:InitStatic("itm_tent:form:icon",self.form)
		self.picture_parts = self.xml:InitStatic("itm_tent:form:icon_parts",self.form)

		local inv_grid_width = alun_utils.read_from_ini(ini,"tarpaulin","inv_grid_width","float",0)
		local inv_grid_height = alun_utils.read_from_ini(ini,"tarpaulin","inv_grid_height","float",0)
		local inv_grid_x = alun_utils.read_from_ini(ini,"tarpaulin","inv_grid_x","float",0)
		local inv_grid_y = alun_utils.read_from_ini(ini,"tarpaulin","inv_grid_y","float",0)
		local x1 = inv_grid_x*50
		local y1 = inv_grid_y*50
		local w = inv_grid_width*50
		local h = inv_grid_height*50
		local x2 = x1 + w
		local y2 = y1 + h
		local w,h = w,h
		if (utils.is_widescreen()) then
			w,h = w/1.5,h/1.2
		else
			w,h = w/1.3,h/1.3
		end
		self.pic:InitTexture("ui\\ui_icon_equipment")
		self.pic:SetTextureRect(Frect():set(x1,y1,x2,y2))
		self.pic:SetWndSize(vector2():set(w,h))

		if not (self.pic.x) then
			local pos = self.pic:GetWndPos()
			local posform = self.form:GetWndPos()
			self.pic.x = pos.x + posform.x
			self.pic.y = pos.y + posform.y
		end
		self.pic:SetWndPos(vector2():set(self.pic.x-w/2, self.pic.y-h/2))
	end

	-- tent mat icon
	if has_tent_mat then
		self.picm = self.xml:InitStatic("itm_tent:form:icon_tent_mat",self.form)
		local linv_grid_width = alun_utils.read_from_ini(ini,"beadspread","inv_grid_width","float",0)
		local linv_grid_height = alun_utils.read_from_ini(ini,"beadspread","inv_grid_height","float",0)
		local linv_grid_x = alun_utils.read_from_ini(ini,"beadspread","inv_grid_x","float",0)
		local linv_grid_y = alun_utils.read_from_ini(ini,"beadspread","inv_grid_y","float",0)
		x1 = linv_grid_x*50
		y1 = linv_grid_y*50
		w = linv_grid_width*50
		h = linv_grid_height*50
		x2 = x1 + w
		y2 = y1 + h
		local w,h = w,h
		if (utils.is_widescreen()) then
			w,h = w/1.5,h/1.2
		else
			w,h = w/1.3,h/1.3
		end
		self.picm:InitTexture("ui\\ui_icon_equipment")
		self.picm:SetTextureRect(Frect():set(x1,y1,x2,y2))
		self.picm:SetWndSize(vector2():set(w,h))
		if not (self.picm.x) then
			local pos = self.picm:GetWndPos()
			local posform = self.form:GetWndPos()
			self.picm.x = pos.x + posform.x
			self.picm.y = pos.y + posform.y
		end
			self.picm:SetWndPos(vector2():set(self.picm.x-w/2, self.picm.y-h/2))
	end

	-- NRC foil icon
	if has_protection then
		self.picf = self.xml:InitStatic("itm_tent:form:icon_protection",self.form)
		local linv_grid_width = alun_utils.read_from_ini(ini,"nrc_foil","inv_grid_width","float",0)
		local linv_grid_height = alun_utils.read_from_ini(ini,"nrc_foil","inv_grid_height","float",0)
		local linv_grid_x = alun_utils.read_from_ini(ini,"nrc_foil","inv_grid_x","float",0)
		local linv_grid_y = alun_utils.read_from_ini(ini,"nrc_foil","inv_grid_y","float",0)
		x1 = linv_grid_x*50
		y1 = linv_grid_y*50
		w = linv_grid_width*50
		h = linv_grid_height*50
		x2 = x1 + w
		y2 = y1 + h
		local w,h = w,h
		if (utils.is_widescreen()) then
			w,h = w/1.5,h/1.2
		else
			w,h = w/1.3,h/1.3
		end
		self.picf:InitTexture("ui\\ui_icon_equipment")
		self.picf:SetTextureRect(Frect():set(x1,y1,x2,y2))
		self.picf:SetWndSize(vector2():set(w,h))
		if not (self.picf.x) then
			local pos = self.picf:GetWndPos()
			local posform = self.form:GetWndPos()
			self.picf.x = pos.x + posform.x
			self.picf.y = pos.y + posform.y
		end
			self.picf:SetWndPos(vector2():set(self.picf.x-w/2, self.picf.y-h/2))
	end

	-- Captions
	self.caption_up = self.xml:InitTextWnd("itm_tent:form:caption_up",self.form)
	self.caption_down = self.xml:InitTextWnd("itm_tent:form:caption_down",self.form)

	-- List Box
	self.xml:InitFrame ("itm_tent:form:list_frame",self.form)
	self.list_box = self.xml:InitListBox("itm_tent:form:list",self.form)
	self.list_box:ShowSelectedItem (true)
	self:Register (self.list_box, "list_window")
	-- Parts List Box
	self.list_pos = self.list_box:GetWndPos()
	self.list_box_parts = self.xml:InitListBox("itm_tent:form:list_parts",self.form)
	local frame = self.xml:InitFrame("itm_tent:form:list_frame_parts",self.form)
	self:Register(self.list_box_parts, "list_window_parts")

	-- Buttons
	ctrl = self.xml:Init3tButton("itm_tent:form:btn_ok", self.form)
	self:Register (ctrl, "button_ok")
	ctrl = self.xml:Init3tButton("itm_tent:form:btn_cancel", self.form)
	self:Register (ctrl, "button_back")
end

function tent_ui:InitCallBacks()
	self:AddCallback("button_ok",			ui_events.BUTTON_CLICKED,			self.OnButton_ok,				self)
	self:AddCallback("button_back",			ui_events.BUTTON_CLICKED,			self.OnButton_back_clicked,		self)
	self:AddCallback("list_window",			ui_events.LIST_ITEM_CLICKED,		self.OnListItemClicked,			self)
	self:AddCallback("list_window",			ui_events.WINDOW_LBUTTON_DB_CLICK,	self.OnListItemDbClicked,		self)
	self:AddCallback("list_window_parts",	ui_events.LIST_ITEM_CLICKED, 		self.OnPartsListItemClicked,	self)
	self:AddCallback("list_window_parts",	ui_events.WINDOW_LBUTTON_DB_CLICK,	self.OnPartsListItemDbClicked,	self)
end

function tent_ui:OnPartsListItemClicked()
	feedback2 = true

	if self.list_box_parts:GetSize()==0 then return end

	local item = self.list_box_parts:GetSelectedItem()
	if not (item) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_up:SetText("")
		return
	end

	local se_item = item.item_id and alife():object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_box_parts:RemoveItem(item)
		return
	end

	local sec = se_item:section_name()
	self.caption_down:SetText("")

	local w,h = item.width,item.height
	if (utils.is_widescreen()) then
		w,h = item.width/1.5,item.height/1.2
	else
		w,h = item.width/1.2,item.height/1.2
	end
	self.picture_parts:InitTexture("ui\\ui_icon_equipment")
	self.picture_parts:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture_parts:SetWndSize(vector2():set(w,h))

	if not (self.picture_parts.x) then
		local pos = self.picture_parts:GetWndPos()
		self.picture_parts.x = pos.x
		self.picture_parts.y = pos.y
	end

	self.picture_parts:SetWndPos(vector2():set(self.picture_parts.x-w/2, self.picture_parts.y-h/2))
	self.caption_up:SetText("Utilize")
end

function tent_ui:OnPartsListItemDbClicked()
	self:OnButton_ok()
end

function tent_ui:OnListItemClicked()
	if missing_two then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need more components to put up a tent",25)
		return
	end
	if not has_tent_mat then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need a tent mat to put up a tent",25)
		return
	end
	if not has_tent_fabric then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need tent fabric to put up a tent",25)
		return
	end
	if not has_protection then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need a protection foil to put up a tent",25)
		return
	end
	feedback1 = true
	feedback2 = nil
	self.list_box_parts:RemoveAll()
	self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
	self.caption_up:SetText("")
	self.caption_down:SetText("")

	if self.list_box:GetSize()==0 then return end

	local item = self.list_box:GetSelectedItem()

	if not (item) then
		self.picture:SetTextureRect(Frect():set(0,0,0,0))
		return
	end

	local se_item = alife():object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_box:RemoveItem(item)
		return
	end

	local w,h = item.width,item.height
	if (utils.is_widescreen()) then
		w,h = item.width/1.5,item.height/1.2
	else
		w,h = item.width/1.2,item.height/1.2
	end
	self.picture:InitTexture("ui\\ui_icon_equipment")
	self.picture:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture:SetWndSize(vector2():set(w,h))

	if not (self.picture.x) then
		local pos = self.picture:GetWndPos()
		self.picture.x = pos.x
		self.picture.y = pos.y
	end

	self.picture:SetWndPos(vector2():set(self.picture.x-w/2, self.picture.y-h/2))

		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_up:SetText("")
		self:FillSupportList()
end

function tent_ui:OnListItemDbClicked()
	self.caption_up:SetText("%c[0,140,140,140]choose tent support")
end

function tent_ui:OnButton_back_clicked()
	alife():create(self.section,db.actor:position(),0,0,0)
	feedback1 = nil
	feedback2 = nil
	has_tent_fabric = nil
	has_tent_mat = nil
	has_protection = nil
	missing_two = nil
	self:HideDialog()
end

function tent_ui:OnKeyboard(dik, keyboard_action)
	local bind = dik_to_bind(dik)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
		if (bind ~= key_bindings.kUSE) and (dik ~= nil) and (dik ~= DIK_keys.MOUSE_1) then
			self:OnButton_back_clicked()
		elseif (bind == key_bindings.kUSE) then
			self:OnButton_ok()
		end
	end
	return true
end

function tent_ui:OnButton_ok()
	if missing_two then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need more components to put up a tent",25)
		return
	end
	if not has_tent_mat then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need a tent mat to put up a tent",25)
		return
	end
	if not has_tent_fabric then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need tent fabric to put up a tent",25)
		return
	end
	if not has_protection then
		self:OnButton_back_clicked()
		xr_effects.disable_ui_inventory(db.actor,nil)
		itms_manager.show_message("You need a protection foil to put up a tent",25)
		return
	end
	if not feedback1 and not feedback2 then
		self.caption_down:SetText("%c[0,140,140,140]choose your tool")
		return
	end
	if feedback1 and not feedback2 then
		self.caption_up:SetText("%c[0,140,140,140]choose tent support")
		return
	end
	if not feedback2 then return end
	local index = self.list_box:GetSelectedIndex()
	if index == -1 then return end

	local item  = self.list_box:GetItemByIndex(index)
	local obj = item and level.object_by_id(item.item_id)
	if not (obj) then return end

	local getrid1, getrid2
	if self.section == "tarpaulin" then
		getrid1 = db.actor:object("beadspread")
		getrid2 = db.actor:object("nrc_foil")
	end
	if self.section == "beadspread" then
		getrid1 = db.actor:object("tarpaulin")
		getrid2 = db.actor:object("nrc_foil")
	end
	if self.section == "nrc_foil" then
		getrid1 = db.actor:object("tarpaulin")
		getrid2 = db.actor:object("beadspread")
	end
	alife():release(alife():object(getrid1:id()), true)
	alife():release(alife():object(getrid2:id()), true)

	if (self.list_box_parts) then
		local sect = obj:section()
		local getrid = (db.actor:object(sect))
		if (sect == "shovel_mili_sharp") then
			alife():release(alife():object(getrid:id()), true)
			alife():create("shovel_mili", db.actor:position(),0,0,0)
		elseif (sect == "shovel_old_sharp") then
			alife():release(alife():object(getrid:id()), true)
			alife():create("shovel_old", db.actor:position(),0,0,0)
		end

		index = self.list_box_parts:GetSelectedIndex()
		if (index ~= -1) then
			item = self.list_box_parts:GetItemByIndex(index)
			local se_parts = item and item.item_id and alife():object(item.item_id)
			if (se_parts) then
				alife():release(se_parts,true)
			end
		end
	end

	-- actor_effects.use_item("toolkit_u_dummy") -- change to proper anim, "put_up_tent" already in place in actor_effects_data.script
	local tent = alife():create("ph_tent",db.actor:position(),db.actor:level_vertex_id(),db.actor:game_vertex_id())
	local TentMapSpot = alun_utils.read_from_ini(system_ini(),"items_refunct_mod","tent_map_spot","string","ui_pda2_tent_location")
	level.map_add_object_spot_ser(tent.id, TentMapSpot, "st_ui_pda_tent")

	feedback1 = nil
	feedback2 = nil
	has_tent_fabric = nil
	has_tent_mat = nil
	has_protection = nil
	missing_two = nil
	local hud = get_hud()
	hud:HideActorMenu()
	self:HideDialog()
end

function tent_ui:AddItemToList(item,listbox,condition)
	local _itm			= load_item(self.file_item_main_sz.y)
	local sec = item and item:section()
	local inv_name 		= item and game.translate_string(alun_utils.read_from_ini(nil,sec,"inv_name","string","error")) or "none"

	_itm:SetWndSize		(self.file_item_main_sz)

	_itm.fn:SetWndPos(vector2():set(0,0))
	_itm.fn:SetWndSize	(self.file_item_fn_sz)
	_itm.fn:SetText		(inv_name)

	if (item) then
		_itm.item_id = item:id()
		local inv_grid_width = alun_utils.read_from_ini(ini,sec,"inv_grid_width","float",0)
		local inv_grid_height = alun_utils.read_from_ini(ini,sec,"inv_grid_height","float",0)
		local inv_grid_x = alun_utils.read_from_ini(ini,sec,"inv_grid_x","float",0)
		local inv_grid_y = alun_utils.read_from_ini(ini,sec,"inv_grid_y","float",0)
		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50
		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50
		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end
	listbox:AddExistingItem(_itm)
end
