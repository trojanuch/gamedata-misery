---------------------------------------------------------------------------
---- Items refunct mod ---- scripting by Plaargath ---- for MISERY mod ----
---------------------------------------------------------------------------

function how_many_items(section)
	local amount = 0
	for i = 0, db.actor:object_count() - 1 do -- thx tt44
		if db.actor:object(i):section() == section then
			amount = amount + 1
		end
	end
	return amount
end

function give(section,amount)
	if not amount then amount = 1 end
	for i = 1, amount do
		alife():create(section,db.actor:position(),0,0,0)
	end
end

function get_rid_of(obj)
	alife():release(alife():object(obj:id()), true)
end

function release_amount(section, amount)
	for i = 0, db.actor:object_count() - 1 do -- thx tt44
		if amount > 0 and db.actor:object(i):section() == section then
			alife():release(alife():object(db.actor:object(i):id()))
			amount = amount - 1
		end
	end
end

function hit_obj(target, strength, hit_type)
	local h = hit()
	h.draftsman	= target
	h.direction	= vector():set(0,0,0)
	h.power		= strength  
	h.impulse	= 1
	h.type		= hit_type
	target:hit(h)
end

function sharpen_tools(obj)
	local sec = obj:section()
	local sec_sharp = tostring(sec.."_sharp")
	local has_any_tools, has_only_weak_tools, tools_wear

	local t_tools = {
		[1] = "sharpening_stones",  -- 4 uses left
		[2] = "sharpening_stones2", -- 3 uses left
		[3] = "sharpening_stones3", -- 2 uses left
		[4] = "sharpening_stones4"  -- 1 use  left
	}

	for i = 1,#t_tools do
		if i <= #t_tools -1 then
			if db.actor:object(t_tools[i]) then
				has_any_tools = true
			end
		else
			if db.actor:object(t_tools[i]) and not has_any_tools then
				has_any_tools = true
				has_only_weak_tools = true
			end
		end
	end

	if not has_any_tools then
		xr_effects.disable_ui_inventory(db.actor, nil)
		itms_manager.show_message(game.translate_string("st_sharp_need_stones"),25)
		return alife():create(sec,db.actor:position(),0,0,0)
	end

	if (not string.find(sec, "shovel")) then
		tools_wear = 1

		for i = #t_tools,1,-1 do
			if i <= 3 then
				if db.actor:object(t_tools[i]) then 
					give(t_tools[i+tools_wear])
					get_rid_of(db.actor:object(t_tools[i]))
					give(sec_sharp)
					actor_effects.use_item("sharpening_stones_dummy")
					break
				end
			else
				if db.actor:object(t_tools[i]) then 
					get_rid_of(db.actor:object(t_tools[i]))
					give(sec_sharp)
					actor_effects.use_item("sharpening_stones_dummy")
					break
				end
			end
		end

	else
		tools_wear = 2

		for i = #t_tools,1,-1 do
			if i <= 2 then
				if db.actor:object(t_tools[i]) then
					give(t_tools[i+tools_wear])
					get_rid_of(db.actor:object(t_tools[i]))
					give(sec_sharp)
					actor_effects.use_item("sharpening_stones_dummy")
					break
				end
			elseif i == 3 then
				if db.actor:object(t_tools[i]) then
					get_rid_of(db.actor:object(t_tools[i]))
					give(sec_sharp)
					actor_effects.use_item("sharpening_stones_dummy")
					break
				end
			elseif i == 4 then
				if db.actor:object(t_tools[i]) then
					local amount = how_many_items(t_tools[i])
					if amount >= 2 then
						release_amount(t_tools[i], 2)
						give(sec_sharp)
						actor_effects.use_item("sharpening_stones_dummy")
						break
					elseif has_only_weak_tools and amount == 1 then
						xr_effects.disable_ui_inventory(db.actor, nil)
						itms_manager.show_message(game.translate_string("st_sharp_need_more_stones"),25)
						give(sec)
						break
					end
				end
			end
		end
	end
end

local chosen_knife
function choose_knife(purpose)
	chosen_knife = nil
	local compare_con = 1.1
	local purpose_lowest_con

	if purpose == "foodcan" then
		purpose_lowest_con = 0.01
	elseif purpose == "mutantloot" then
		purpose_lowest_con = 0.04
	elseif purpose == "dismantle" then
		purpose_lowest_con = 0.1
	end

	for i = 0, db.actor:object_count() - 1 do
		if string.find(db.actor:object(i):section(), "wpn_knife_") then
			local next_con = db.actor:object(i):condition()
			if (next_con > purpose_lowest_con) and (next_con < compare_con) then
				compare_con = next_con
				chosen_knife = db.actor:object(i)
			end
		end
	end

	return chosen_knife
end

local chosen_axe
function choose_axe(purpose)
	chosen_axe = nil
	local compare_con = 1.1
	local purpose_lowest_con

	if purpose == "mutantloot" then
		purpose_lowest_con = 0.02
	elseif purpose == "dismantle" then
		purpose_lowest_con = 0.04
	end

	for i = 0, db.actor:object_count() - 1 do
		if string.find(db.actor:object(i):section(), "wpn_axe") then
			local next_con = db.actor:object(i):condition()
			if (next_con > purpose_lowest_con) and (next_con < compare_con) then
				compare_con = next_con
				chosen_axe = db.actor:object(i)
			end
		end
	end

	return chosen_axe
end

function blunt_knife(used_knife,purpose,percent)
	local cond = used_knife:condition()
	local sect = used_knife:section()

	if purpose == "mutantloot" then
		if sect == "wpn_knife_inv_3" then
			cond = cond - 0.02
		elseif sect == "wpn_knife_inv" then
			cond = cond - 0.02
		elseif sect == "wpn_knife_inv_2" then
			cond = cond - 0.03
		elseif sect == "wpn_knife_m" then
			cond = cond - 0.03
		elseif sect == "wpn_knife_inv_5" then
			cond = cond - 0.04
		elseif sect == "wpn_knife_inv_4" then
			cond = cond - 0.04
		end
	elseif purpose == "foodcan" then
		cond = cond - 0.01
	elseif purpose == "dismantle" then
		if percent then
			cond = cond - percent
		else
			alun_utils.printf("(!) knife condition decrease not defined in function call: itms_refunct.blunt_knife","")
		end
	end

	if (cond < 0) then
		cond = 0
	end

	used_knife:set_condition(cond)
end

function blunt_axe(used_axe,purpose,percent)
	local cond = used_axe:condition()
	local sect = used_axe:section()

	if purpose == "mutantloot" then
		cond = cond - 0.02
	elseif purpose == "dismantle" then
		if percent then
			cond = cond - percent
		else
			alun_utils.printf("(!) axe condition decrease not defined in function call: itms_refunct.blunt_axe","")
		end
	end

	if (cond  < 0) then
		cond = 0
	end

	used_axe:set_condition(cond)
end

function use_tools_on_mutant(obj)
	chosen_knife = choose_knife("mutantloot")
	chosen_axe = choose_axe("mutantloot")

	-- hunting kit (no penalty)
	if db.actor:object("kit_hunt") ~= nil then

	-- knives, axe (% condition penalty, in tiers)
	elseif (chosen_knife ~= nil) then
		blunt_knife(chosen_knife,"mutantloot")
	elseif (chosen_axe ~= nil) then
		blunt_axe(chosen_axe,"mutantloot")

	-- sharpened tools (blunting penalty)
	elseif db.actor:object("swiss_sharp") ~= nil then
		get_rid_of(db.actor:object("swiss_sharp"))
		give("swiss")
	elseif db.actor:object("shovel_mili_sharp") ~= nil then
		get_rid_of(db.actor:object("shovel_mili_sharp"))
		give("shovel_mili")
	elseif db.actor:object("shovel_old_sharp") ~= nil then
		get_rid_of(db.actor:object("shovel_old_sharp"))
		give("shovel_old")

	-- sharpened tools (item loss penalty)
	elseif db.actor:object("cutlery_sharp") ~= nil then
		get_rid_of(db.actor:object("cutlery_sharp"))
	elseif db.actor:object("grooming_sharp") ~= nil then
		get_rid_of(db.actor:object("grooming_sharp"))

	-- outfit dismantling kits (item degradation penalty)
	elseif db.actor:object("outfit_dismantler5") ~= nil then
		get_rid_of(db.actor:object("outfit_dismantler5"))
		give("outfit_dismantler_empty")
	elseif db.actor:object("outfit_dismantler4") ~= nil then
		get_rid_of(db.actor:object("outfit_dismantler4"))
		give("outfit_dismantler5")
	elseif db.actor:object("outfit_dismantler3") ~= nil then
		get_rid_of(db.actor:object("outfit_dismantler3"))
		give("outfit_dismantler4")
	elseif db.actor:object("outfit_dismantler2") ~= nil then
		get_rid_of(db.actor:object("outfit_dismantler2"))
		give("outfit_dismantler3")
	elseif db.actor:object("outfit_dismantler") ~= nil then
		get_rid_of(db.actor:object("outfit_dismantler"))
		give("outfit_dismantler2")

	-- no tools
	else
		itms_manager.show_message(game.translate_string("st_mutloot_need_tool"),25)
		local halt = true
		return halt
	end
end

local chosen_lighter
function choose_lighter(purpose)
	chosen_lighter = nil
	local compare_con = 1.1
	local purpose_lowest_con
	if purpose == "smoke" then
		purpose_lowest_con = 0.02
	elseif purpose == "wood_stove" then
		purpose_lowest_con = 0.06
	elseif purpose == "fieldcooker" then
		purpose_lowest_con = 0.04
	else
		return
	end
	for i = 0, db.actor:object_count() - 1 do
		if db.actor:object(i):section() == "lighter" then
			local next_con = db.actor:object(i):condition()
			if (next_con >= purpose_lowest_con) and (next_con < compare_con) then
				compare_con = next_con
				chosen_lighter = db.actor:object(i)
			end
		end
	end
	return chosen_lighter
end

function drain_lighter(used_lighter,purpose)
	local cond = used_lighter:condition()
	if purpose == "smoke" then
		cond = cond - 0.02
	elseif purpose == "fieldcooker" then
		cond = cond - 0.04
	elseif purpose == "wood_stove" then
		cond = cond - 0.06
	end
	used_lighter:set_condition(cond)
end

function refuel_target(obj)
	local getback = obj:section()
	local target = db.actor:object("lighter")
	local target_sec = "lighter"
	local chosen_target, chosen_target_con

	if target == nil then
		xr_effects.disable_ui_inventory(db.actor, nil)
		itms_manager.show_message(game.translate_string("st_lighter_refill_no_target"),25)
		give(getback)
		return
	elseif how_many_items(target_sec) == 1 then
		chosen_target = target
		chosen_target_con = target:condition()
		if chosen_target_con >= 0.94 then
			xr_effects.disable_ui_inventory(db.actor, nil)
			itms_manager.show_message(game.translate_string("st_lighter_refill_target_full"),25)
			give(getback)
			return
		end
	elseif how_many_items(target_sec) > 1 then
		local lowest_con = 1
		for i = 0, db.actor:object_count() - 1 do
			if db.actor:object(i):section() == target_sec then
				local next_con = db.actor:object(i):condition()
				if (next_con >= 0) and (next_con < lowest_con) then
					lowest_con = next_con
					chosen_target = db.actor:object(i)
					chosen_target_con = lowest_con
				end
			end
		end
		if lowest_con >= 0.94 then
			xr_effects.disable_ui_inventory(db.actor, nil)
			itms_manager.show_message(game.translate_string("st_lighter_refill_all_targets_full"),25)
			give(getback)
			return
		end
	end

	local tools_wear = 1
	local tools_gain = 1
	local set_con
	local t_tools = {
		[1] = "lighter_refiller1",
		[2] = "lighter_refiller2",
		[3] = "lighter_refiller3",
		[4] = "lighter_refiller4",
		[5] = "lighter_refiller5"
	}

	for i = 1,#t_tools do
		if getback == t_tools[i] then
			if i ~= 1 then
				give(t_tools[i-tools_wear])
			end
		end
	end

	set_con = chosen_target_con + tools_gain
	chosen_target:set_condition(set_con)
	actor_effects.use_item("lighter_refillers")
end

function reduce_smoke_portion(obj)
	local sec = obj:section()
	if sec == "marijuana"				then give("marijuana2") end
	if sec == "marijuana2"				then give("marijuana3") end
	if sec == "cigarettes"				then give("cigarettes2") end
	if sec == "cigarettes2"				then give("cigarettes3") end
	if sec == "cigarettes3"				then give("cigarettes4") end
	if sec == "cigar1"					then give("cigar1_2") end
	if sec == "cigar1_2"				then give("cigar1_3") end
	if sec == "cigar2"					then give("cigar2_2") end
	if sec == "cigar2_2"				then give("cigar2_3") end
	if sec == "cigar3"					then give("cigar3_2") end
	if sec == "cigar3_2"				then give("cigar3_3") end
	if sec == "tobacco"					then give("tobacco2") end
	if sec == "tobacco2"				then give("tobacco3") end
	if sec == "tobacco3"				then give("tobacco4") end
	if sec == "tobacco4"				then give("tobacco5") end
	if sec == "hand_rolling_tobacco"	then give("hand_rolling_tobacco2") end
	if sec == "hand_rolling_tobacco2"	then give("hand_rolling_tobacco3") end
	if sec == "hand_rolling_tobacco3"	then give("hand_rolling_tobacco4") end
	if sec == "hand_rolling_tobacco4"	then give("hand_rolling_tobacco5") end
	if sec == "cigarettes_lucky"		then give("cigarettes_lucky2") end
	if sec == "cigarettes_lucky2"		then give("cigarettes_lucky3") end
	if sec == "cigarettes_lucky3"		then give("cigarettes_lucky4") end
	if sec == "cigarettes_russian"		then give("cigarettes_russian2") end
	if sec == "cigarettes_russian2"		then give("cigarettes_russian3") end
end

function light_up_and_eat(obj)
	local sec = obj:section()
	local sec_smoke = tostring(sec.."_smoke")
	local has_one_lighter, has_lighters

	local amount = how_many_items("lighter")
	if amount >= 1 then has_lighters = true end
	if amount == 1 then has_one_lighter = true end

	chosen_lighter = choose_lighter("smoke")

	if not has_lighters then
		xr_effects.disable_ui_inventory(db.actor, nil)
		itms_manager.show_message(game.translate_string("st_lighter_no"),25)
		give(sec)
	elseif has_one_lighter and not chosen_lighter then
		xr_effects.disable_ui_inventory(db.actor, nil)
		itms_manager.show_message(game.translate_string("st_lighter_dead"),25)
		give(sec)
	elseif has_lighters and not chosen_lighter then
		xr_effects.disable_ui_inventory(db.actor, nil)
		itms_manager.show_message(game.translate_string("st_lighter_all_dead"),25)
		give(sec)
	elseif chosen_lighter then
		drain_lighter(chosen_lighter,"smoke")
		give(sec_smoke)
		db.actor:eat(db.actor:object(sec_smoke))
		reduce_smoke_portion(obj)
	end
end

function open_and_eat(obj)
	local sec_display
	local sec = obj:section()
	local sec_opened = tostring(sec.."_opened")
	chosen_knife = choose_knife("foodcan")

	if (db.actor:object("swiss") ~= nil) then
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "swiss"

	elseif (db.actor:object("swiss_sharp") ~= nil) then
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "swiss_sharp"

	elseif (db.actor:object("kit_hunt") ~= nil) then
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "kit_hunt"

	elseif (chosen_knife ~= nil) then
		blunt_knife(chosen_knife,"foodcan")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = chosen_knife:section()

	elseif (db.actor:object("cutlery_sharp") ~= nil) then
		get_rid_of(db.actor:object("cutlery_sharp"))
		give("cutlery")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "cutlery_sharp"

	elseif (db.actor:object("grooming_sharp") ~= nil) then
		get_rid_of(db.actor:object("grooming_sharp"))
		give("grooming")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "grooming_sharp"

	elseif (db.actor:object("outfit_dismantler5") ~= nil) then
		get_rid_of(db.actor:object("outfit_dismantler5"))
		give("outfit_dismantler_empty")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "outfit_dismantler5"

	elseif (db.actor:object("outfit_dismantler4") ~= nil) then
		get_rid_of(db.actor:object("outfit_dismantler4"))
		give("outfit_dismantler5")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "outfit_dismantler4"

	elseif (db.actor:object("outfit_dismantler3") ~= nil) then
		get_rid_of(db.actor:object("outfit_dismantler3"))
		give("outfit_dismantler4")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "outfit_dismantler3"

	elseif (db.actor:object("outfit_dismantler2") ~= nil) then
		get_rid_of(db.actor:object("outfit_dismantler2"))
		give("outfit_dismantler3")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "outfit_dismantler2"

	elseif (db.actor:object("outfit_dismantler") ~= nil) then
		get_rid_of(db.actor:object("outfit_dismantler"))
		give("outfit_dismantler2")
		give(sec_opened)
		db.actor:eat(db.actor:object(sec_opened))
		sec_display = "outfit_dismantler"

	else
		xr_effects.disable_ui_inventory(db.actor, nil)
		itms_manager.show_message(game.translate_string("st_canfood_nosharp"),25)
		give(sec)
	end

	if sec_display then
		itms_manager.show_message(game.translate_string("st_canfood_screen_hint").." "..game.translate_string(alun_utils.read_from_ini(nil,sec_display,"inv_name","string","error")),25)
	end
end

function initial_dummies_spawn()
	-- eating
	give("conserva_opened")
	give("tushonka_opened")
	give("tomato_opened")
	give("beans_opened")
	give("corn_opened")
	give("chili_opened")
	-- smoking
	give("joint_smoke")
	give("marijuana_smoke")
	give("marijuana2_smoke")
	give("marijuana3_smoke")
	give("cigarettes_smoke")
	give("cigarettes2_smoke")
	give("cigarettes3_smoke")
	give("cigarettes4_smoke")
	give("cigar1_smoke")
	give("cigar1_2_smoke")
	give("cigar1_3_smoke")
	give("cigar2_smoke")
	give("cigar2_2_smoke")
	give("cigar2_3_smoke")
	give("cigar3_smoke")
	give("cigar3_2_smoke")
	give("cigar3_3_smoke")
	give("tobacco_smoke")
	give("tobacco2_smoke")
	give("tobacco3_smoke")
	give("tobacco4_smoke")
	give("tobacco5_smoke")
	give("hand_rolling_tobacco_smoke")
	give("hand_rolling_tobacco2_smoke")
	give("hand_rolling_tobacco3_smoke")
	give("hand_rolling_tobacco4_smoke")
	give("hand_rolling_tobacco5_smoke")
	give("cigar_smoke")
	give("cigarettes_lucky_smoke")
	give("cigarettes_lucky2_smoke")
	give("cigarettes_lucky3_smoke")
	give("cigarettes_lucky4_smoke")
	give("cigarettes_russian_smoke")
	give("cigarettes_russian2_smoke")
	give("cigarettes_russian3_smoke")
	-- sleeping
	for i = 1 , 3 do
		for j = 1 , 24 do
			give("sleep_t"..i.."_"..j.."h")
		end
	end
end

function quick_actor_effect(eff)
	if eff == "electro_shock" then
		xr_effects.play_inv_dismantle_electro_shock()
		hit_obj(db.actor, 0.1, hit.shock)
		level.add_cam_effector("camera_effects\\fusker.anm",1002,false)
	end
	if eff == "blast" then
		xr_effects.play_inv_dismantle_blast()
		hit_obj(db.actor, 1.2, hit.explosion)
		level.add_cam_effector("camera_effects\\fusker.anm",1002,false)
		level.add_pp_effector("thermal_mine.ppe",2017, true)
		level.set_pp_effector_factor(1120, 1)
	end
	if eff == "hammer_wpn_fail" then
		xr_effects.play_inv_dismantle_hammer_wpn_fail()
		level.add_cam_effector("camera_effects\\shell_shock.anm",1002,false)
	end
	if eff == "swiss_sharp_wpn_fail" then
		xr_effects.play_inv_dismantle_swiss_sharp_wpn_fail()
		level.add_cam_effector("camera_effects\\shell_shock.anm",1002,false)
	end
	if eff == "cutlery_sharp_wpn_fail" then
		xr_effects.play_inv_dismantle_cutlery_sharp_wpn_fail()
		level.add_cam_effector("camera_effects\\shell_shock.anm",1002,false)
	end
	if eff == "hammer_helm_fail" then
		xr_effects.play_inv_dismantle_hammer_helm_fail()
		level.add_cam_effector("camera_effects\\shell_shock.anm",1002,false)
	end
	-- db.actor:restore_weapon() --// OBSOLETE
end

function spawn_in_front_quadrant(itm)
	local dir = db.actor:direction()
	local dx = dir.x -- (+ on E - on W)
	local dz = dir.z -- (+ on N - on S)

	local sign_x, sign_z
	if dx >= 0 then sign_x = 1 elseif dx < 0 then sign_x = -1 end
	if dz >= 0 then sign_z = 1 elseif dz < 0 then sign_z = -1 end

	local pos = db.actor:position()
	local px = pos.x
	local py = pos.y
	local pz = pos.z

	local add_on_x = 1 -- EW distance
	local add_on_z = 1 -- NS distance

	local npx = px + add_on_x * sign_x
	local npz = pz + add_on_z * sign_z
	local npy = py + 1 -- height

	local spawn_position = vector():set(npx,npy,npz)
	alife():create(itm,spawn_position,db.actor:level_vertex_id(),db.actor:game_vertex_id())
end