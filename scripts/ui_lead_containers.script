-- ui_itm_repair
-- Alundaio
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License

Modified by Yasti for use with Lead Containers
--]]
-------------------------------------------------------------------

local max_arts_in_container = 2

local cur_cont_index
local container_arts
local arts_cont
local arts_inv
local flag

class "load_item" (CUIListBoxItem)
function load_item:__init(height) super(height)
	self.file_name		= "filename"

	self:SetTextColor(GetARGB(255, 170, 170, 170))

	self.fn = self:GetTextItem()
	self.fn:SetFont(GetFontLetterica18Russian())
	self.fn:SetEllipsis(true)
end

function load_item:__finalize()
end

-------------------------------------------------------------------
class "lead_ui" (CUIScriptWnd)

function lead_ui:__init(owner,section) super()
	self.owner = owner
	self.section = section
	local ini = ini_file("plugins\\arty_container.ltx")
	self.artefact = alun_utils.collect_section(ini,"artifacts",true)
	self:InitControls()
	self:InitCallBacks()
	ini = nil
end

function lead_ui:__finalize()
end

function lead_ui:FillList(cont_id)
	cur_cont_index = cont_id
	self.list_box:RemoveAll()
	self:FillPartsList()
	
	arts_inv = 0
	local t
	
	local function fill_list(actor,obj)
		if (obj) and self.artefact[obj:section()] then
			local art_index = inventory_radiation.get_art_index(obj:section())
			t = inventory_radiation.get_inv_arts_number(art_index)
		
			if t>0 then
				arts_inv = arts_inv + 1
			end
			
			self:AddItemToList(obj,self.list_box)
		end
	end

	db.actor:iterate_inventory(fill_list,db.actor)
	alife():release(alife():object(cur_cont_index), true)
end

function lead_ui:FillPartsList()
	self.list_box_parts:RemoveAll()
	container_arts = lead_containers.get_inv_container_arts(cur_cont_index)

	arts_cont = 0
	
	if not empty(container_arts) then
		for k,v in pairs(container_arts) do
			if v ~= 0 then
				arts_cont = arts_cont+1
				alun_utils.printf("container arts list check 1= "..tostring(k).." | "..tostring(v))
				self:AddItemToStoredList(v,self.list_box_parts)
			end
		end
	end
end

function lead_ui:InitControls()
	self:SetWndRect			(Frect():set(0,0,1024,768))

	self:SetAutoDelete(true)

	self.xml				= CScriptXmlInit()
	local ctrl
	self.xml:ParseFile			("ui_itm_main.xml")

	ctrl					= CUIWindow()
	self.xml:InitWindow			("itm_lead:file_item:main",0,ctrl)

	self.file_item_main_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.xml:InitWindow			("itm_lead:file_item:fn",0,ctrl)
	self.file_item_fn_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.xml:InitWindow			("itm_lead:file_item:fd",0,ctrl)
	self.file_item_fd_sz	= vector2():set(ctrl:GetWidth(),ctrl:GetHeight())

	self.form				= self.xml:InitStatic("itm_lead:form",self)
	self.form:SetWndPos(vector2():set(0, 0))

	if (self.use_parts) then
		--self.xml:InitStatic("itm_repair:form:list_parts_background",self.form)
	end


	-- Item picture
	self.picture			= self.xml:InitStatic("itm_lead:form:icon",self.form)
	self.picture_parts		= self.xml:InitStatic("itm_lead:form:icon_parts",self.form)

	-- Repair tool picture
	self.pic = self.xml:InitStatic("itm_lead:form:icon_tool",self.form)

	local inv_grid_width = alun_utils.read_from_ini(ini,self.section,"inv_grid_width","float",0)
	local inv_grid_height = alun_utils.read_from_ini(ini,self.section,"inv_grid_height","float",0)
	local inv_grid_x = alun_utils.read_from_ini(ini,self.section,"inv_grid_x","float",0)
	local inv_grid_y = alun_utils.read_from_ini(ini,self.section,"inv_grid_y","float",0)

	local x1 = inv_grid_x*50
	local y1 = inv_grid_y*50

	local w = inv_grid_width*50
	local h = inv_grid_height*50

	local x2 = x1 + w
	local y2 = y1 + h

	local w,h = w/1.2,h/1.2
	self.pic:InitTexture("ui\\ui_icon_equipment")
	self.pic:SetTextureRect(Frect():set(x1,y1,x2,y2))
	self.pic:SetWndSize(vector2():set(w,h))

	-- Caption
	self.caption_parts 		= self.xml:InitTextWnd("itm_lead:form:caption_parts",self.form)
	self.caption_icon		= self.xml:InitTextWnd("itm_lead:form:caption_icon",self.form)

	-- List Box
	self.xml:InitFrame			("itm_lead:form:list_frame",self.form)

	self.list_box			= self.xml:InitListBox("itm_lead:form:list",self.form)

	self.list_box:ShowSelectedItem	(true)
	self:Register			(self.list_box, "list_window")

	self.list_pos = self.list_box:GetWndPos()

	self.list_box_parts			= self.xml:InitListBox("itm_lead:form:list_parts",self.form)

	local frame = self.xml:InitFrame("itm_lead:form:list_frame_parts",self.form)

	self.list_box_parts:ShowSelectedItem(true)
	self:Register(self.list_box_parts, "list_window_parts")

	-- Button Repair
	ctrl					= self.xml:Init3tButton("itm_lead:form:btn_ok",	self.form)
	self:Register			(ctrl, "button_ok")

	-- Button Cancel
	ctrl = self.xml:Init3tButton	("itm_lead:form:btn_cancel",	self.form)
	self:Register			(ctrl, "button_back")
end

function lead_ui:InitCallBacks()
	self:AddCallback("button_ok",		ui_events.BUTTON_CLICKED,         self.OnButton_ok,			self)
	self:AddCallback("button_back",		ui_events.BUTTON_CLICKED,             self.OnButton_back_clicked,	self)

	self:AddCallback("list_window", ui_events.LIST_ITEM_CLICKED, 			  self.OnListItemClicked,		self)
	self:AddCallback("list_window", ui_events.WINDOW_LBUTTON_DB_CLICK,		  self.OnListItemDbClicked,		self)

	self:AddCallback("list_window_parts", ui_events.LIST_ITEM_CLICKED, 		  self.OnPartsListItemClicked,		self)
	self:AddCallback("list_window_parts", ui_events.WINDOW_LBUTTON_DB_CLICK,  self.OnPartsListItemDbClicked,	self)
end

function lead_ui:OnPartsListItemClicked()
	if self.list_box_parts:GetSize()==0 then return end
	
	local item = self.list_box_parts:GetSelectedItem()
	if not (item) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_parts:SetText("")
		return
	end

	local sec = item

	local w,h = item.width/1.2,item.height/1.2
	self.picture_parts:InitTexture("ui\\ui_icon_equipment")
	self.picture_parts:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture_parts:SetWndSize(vector2():set(w,h))

	if not (self.picture_parts.x) then
		local pos = self.picture_parts:GetWndPos()
		self.picture_parts.x = pos.x
		self.picture_parts.y = pos.y
	end
	
	self.picture_parts:SetWndPos(vector2():set(self.picture_parts.x-w/2, self.picture_parts.y-h/2))
	
	if (self.artefact) then
		self.picture:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_icon:SetText("")
	end
	
	flag = 0
	self.caption_parts:SetText("Remove from Container")
end

function lead_ui:OnPartsListItemDbClicked()
	self:OnButton_ok()
end


function lead_ui:OnListItemClicked()
	if self.list_box:GetSize()==0 then return end

	local item = self.list_box:GetSelectedItem()

	if not (item) then
		self.picture:SetTextureRect(Frect():set(0,0,0,0))
		return
	end
	
	
	local se_item = alife():object(item.item_id)
	if (se_item == nil or not db.actor:object(se_item:section_name())) then
		self.list_box:RemoveItem(item)
		return
	end
	local sec = item
	local w,h = item.width/1.2,item.height/1.2
	self.picture:InitTexture("ui\\ui_icon_equipment")
	self.picture:SetTextureRect(Frect():set(item.x1,item.y1,item.x2,item.y2))
	self.picture:SetWndSize(vector2():set(w,h))

	if not (self.picture.x) then
		local pos = self.picture:GetWndPos()
		self.picture.x = pos.x
		self.picture.y = pos.y
	end

	self.picture:SetWndPos(vector2():set(self.picture.x-w/2, self.picture.y-h/2))

	if (self.artefact) then
		self.picture_parts:SetTextureRect(Frect():set(0,0,0,0))
		self.caption_parts:SetText("")
	end
	
	self.caption_icon:SetText("Place in Container")
	flag = 1
end

function lead_ui:OnListItemDbClicked()
	self:OnButton_ok()
end

function lead_ui:OnButton_back_clicked()
	lead_containers.respawn_container(cur_cont_index)
	self:HideDialog()
end

function lead_ui:OnKeyboard(dik, keyboard_action)
	CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
	if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
		if (dik == DIK_keys.DIK_RETURN) then

		elseif (dik == DIK_keys.DIK_ESCAPE) then
			self:OnButton_back_clicked()
		end
	end
	return true
end

function lead_ui:OnButton_ok()
	if self.list_box:GetSelectedItem() and flag == 1 then
		local index = self.list_box:GetSelectedIndex()
		if index == -1 then return end
			
		local item  = self.list_box:GetItemByIndex(index)
		local item_index = item.item_index

		if (arts_cont < max_arts_in_container) then
			local art_section = item.section

			for i=1,max_arts_in_container do
				if container_arts[i]==0 then
					container_arts[i]=art_section
					arts_cont = arts_cont + 1
					break
				end
			end

			actor_effects.use_item("container_tool_lead_box_dummy")			
			lead_containers.respawn_container(cur_cont_index)
			inventory_radiation.register_artefact(art_section,1,true)
			remove_item(art_section)
			self:HideDialog()
			xr_effects.disable_ui_inventory(db.actor, nil)
			lead_ballast.check_ballast()
			xr_effects.enable_ui(db.actor, nil)
		end
	
	elseif self.list_box_parts:GetSelectedItem() and flag == 0 then
		index = self.list_box_parts:GetSelectedIndex()
		local item = self.list_box_parts:GetItemByIndex(index)
		local item_sec = item.item_sec

		for i=1, #container_arts do
			if container_arts[i] == item_sec then
 				container_arts[i] = 0
				arts_cont = arts_cont - 1
				break
			end
		end

		actor_effects.use_item("lead_box_dummy")
		lead_containers.respawn_container(cur_cont_index)
		alife():create(item_sec, db.actor:position(), db.actor:level_vertex_id(), db.actor:game_vertex_id(), db.actor:id())
		inventory_radiation.register_artefact(item_sec,-1,true)
		self:HideDialog()
		xr_effects.disable_ui_inventory(db.actor, nil)
		lead_ballast.check_ballast()
		xr_effects.enable_ui(db.actor, nil)
	end
end

function lead_ui:AddItemToList(item,listbox,condition)
	local _itm			= load_item(self.file_item_main_sz.y)
	local sec = item and item:section()
	local inv_name 		= item and game.translate_string(alun_utils.read_from_ini(nil,sec,"inv_name","string","error")) or "none"
	local ini = system_ini()

	_itm:SetWndSize		(self.file_item_main_sz)

	_itm.fn:SetWndPos(vector2():set(0,0))
	_itm.fn:SetWndSize	(self.file_item_fn_sz)
	_itm.fn:SetText		(inv_name)

	if (item) then
		local weight = alun_utils.read_from_ini(ini,sec,"inv_weight","float",0)
		weight = tonumber(string.format("%.2f", weight))
		
		_itm.fage     = _itm:AddTextField(weight.."kg", self.file_item_fd_sz.x)
		_itm.item_id = item:id()
		_itm.section = item:section()
		_itm.item_index = inventory_radiation.get_art_index(item:section())
		
		
		
		local inv_grid_width = alun_utils.read_from_ini(ini,sec,"inv_grid_width","float",0)
		local inv_grid_height = alun_utils.read_from_ini(ini,sec,"inv_grid_height","float",0)
		local inv_grid_x = alun_utils.read_from_ini(ini,sec,"inv_grid_x","float",0)
		local inv_grid_y = alun_utils.read_from_ini(ini,sec,"inv_grid_y","float",0)

		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50

		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50

		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end

	listbox:AddExistingItem(_itm)
end

function lead_ui:AddItemToStoredList(item,listbox,condition)
	
	local _itm			= load_item(self.file_item_main_sz.y)
	local sec = item
	local inv_name 		= item and game.translate_string(alun_utils.read_from_ini(nil,sec,"inv_name","string","error")) or "none"

	_itm:SetWndSize		(self.file_item_main_sz)

	_itm.fn:SetWndPos(vector2():set(0,0))
	_itm.fn:SetWndSize	(self.file_item_fn_sz)
	_itm.fn:SetText		(inv_name)

	if (item) then
		local weight = alun_utils.read_from_ini(ini,sec,"inv_weight","float",0)
		weight = tonumber(string.format("%.2f", weight))
		
		_itm.fage     = _itm:AddTextField(weight.."kg", self.file_item_fd_sz.x)
		_itm.item_sec = item

		local inv_grid_width = alun_utils.read_from_ini(ini,sec,"inv_grid_width","float",0)
		local inv_grid_height = alun_utils.read_from_ini(ini,sec,"inv_grid_height","float",0)
		local inv_grid_x = alun_utils.read_from_ini(ini,sec,"inv_grid_x","float",0)
		local inv_grid_y = alun_utils.read_from_ini(ini,sec,"inv_grid_y","float",0)

		_itm.x1 = inv_grid_x*50
		_itm.y1 = inv_grid_y*50

		_itm.width = inv_grid_width*50
		_itm.height = inv_grid_height*50

		_itm.x2 = _itm.x1 + _itm.width
		_itm.y2 = _itm.y1 + _itm.height
	end

	listbox:AddExistingItem(_itm)
end

	
function remove_item(item_section)
  local obj = db.actor:object(item_section)
  remove_obj(obj:id())
end	

function remove_obj(obj_id)
  alife():release(alife():object(obj_id), true)
end
		