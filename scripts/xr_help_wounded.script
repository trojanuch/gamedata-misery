----------------------------------------------------------------------------------------------------------------------
-- Alundaio (original: Stohe)
--[[
Copyright (C) 2012 Alundaio
This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 3.0 Unported License
--]]
----------------------------------------------------------------------------------------------------------------------

--------------------
local level = level
local alife = alife
--------------------

local ini = ini_file("ai_tweaks\\xr_help_wounded.ltx")
local HelpInCombat = alun_utils.read_from_ini(ini,"settings","help_in_combat","bool",false)
local UseNewAnim = alun_utils.read_from_ini(ini,"settings","use_new_anim","bool",true)
local AnimCombat = alun_utils.read_from_ini(ini,"settings","anim_combat_type","float",2)
local AnimFree = alun_utils.read_from_ini(ini,"settings","anim_free_type","float",1)
local AlwaysHelpDistance = alun_utils.read_from_ini(ini,"settings","help_in_combat","float",3)
local HelpInCombatVisuals = alun_utils.collect_sections(ini,{"help_in_combat_visuals"})
ini = nil

function help_wounded(npc)
	state_mgr.set_state(npc,"guard")
	--alun_utils.printf("%s Helping wounded.",npc:name())
	local id = npc and npc:id()
	local st = id and db.storage[id] and db.storage[id].help_wounded
	if not (st) then
		return
	end

	local selected_id = st.selected_id
	local selected_npc = selected_id and db.storage[selected_id] and db.storage[selected_id].object or selected_id and level.object_by_id(selected_id)

	-- reset scheme dependent variables
	if (st.selected_id and db.storage[st.selected_id]) then
		db.storage[st.selected_id].wounded_already_selected = nil
	end
	st.selected_id = nil
	st.vertex_id = nil
	st.vertex_position = nil
	st.stage = 1
	st.nearest_dist = nil
	st.nearest_vertex = nil
	st.nearest_position = nil
	st.nearest_id = nil
	st.index = 1

	if not (selected_npc) then
		return
	end

	xr_sound.set_sound_play(id, "wounded_medkit")

	alife():create("medkit_script",selected_npc:position(),selected_npc:level_vertex_id(),selected_npc:game_vertex_id(),selected_id)

	xr_wounded.unlock_medkit(selected_npc)

	npc:set_character_rank(npc:character_rank()+2)
end

------------------------------------------
-- Localized Functions
------------------------------------------

local function has_enemy(npc)
	local be = npc:best_enemy()
	if (be and xr_wounded.is_wounded(be) ~= true) then
		return true
	end
	return false
end

local function combat_can_help(npc,vo,dist)
	local be = npc:best_enemy()
	if (be) then
		if (not be:see(vo) and dist < AlwaysHelpDistance) then
			return true
		end

		if (not be:see(vo) and not be:see(npc)) then
			return true
		end
		return false
	end
	return true
end

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
class "evaluator_wounded_exist" (property_evaluator)
function evaluator_wounded_exist:__init(name, storage, npc) super (nil, name)
	self.a = storage
	self.a.stage = 1
end

local function eval_stage_1(st,npc,vis)
	if (st.cstackcheck) then
		alun_utils.printf("c stack error help wounded")
		return
	end
	st.cstackcheck = true

	if not (db.OnlineStalkers) then
		return false
	end

	if not (st.index) then
		st.index = 1
	end

	local size = #db.OnlineStalkers
	if (size == 0 or st.index > size) then

		if (st.nearest_id and db.storage[st.nearest_id] and db.storage[st.nearest_id].wounded_already_selected == nil) then
			if (st.selected_id and db.storage[st.selected_id]) then
				db.storage[st.selected_id].wounded_already_selected = nil
			end

			st.selected_id = st.nearest_id
			st.vertex_id = st.nearest_vertex
			st.vertex_position = st.nearest_position

			st.index = 1
			st.nearest_dist = nil
			st.nearest_vertex = nil
			st.nearest_position = nil
			st.nearest_id = nil

			st.stage = 2
			--alun_utils.printf("%s Found victim to help.",npc:name())

			db.storage[st.selected_id].wounded_already_selected = npc:id()
			st.cstackcheck = nil
			return true
		end

		st.index = 1
		st.nearest_dist = nil
		st.nearest_vertex = nil
		st.nearest_position = nil
		st.nearest_id = nil

		st.cstackcheck = nil
		return false
	end

	local id = db.OnlineStalkers[st.index]
	local vo = id and db.storage[id] and db.storage[id].object or id and db.storage[id] and level.object_by_id(id)

	if (vo and vo:alive() and db.storage[id] and db.storage[id].wounded_already_selected == nil and (db.storage[id].wounded and db.storage[id].wounded.not_for_help ~= true) and npc:relation(vo) ~= game_object.enemy and xr_wounded.is_wounded(vo) and not db.storage[id].victim_surrender) then
		local vo_position = vo:position()
		local dist = npc:position():distance_to_sqr(vo_position)
		if (not has_enemy(npc) or combat_can_help(npc,vo,dist)) then
			local see = npc:see(vo)
			if (dist <= 1500) or (see and not st.nearest_dist) or (see and dist <= st.nearest_dist) then
				local vertex = level.vertex_id(vo_position)
				if level.vertex_position(vertex):distance_to_sqr(vo_position) > 16 then
					vertex = vo:level_vertex_id()
				end
				if npc:accessible(vertex) and level.vertex_position(vertex):distance_to_sqr(vo_position) <= 15 then
					st.nearest_dist = dist
					st.nearest_vertex = vertex
					st.nearest_position = vo_position
					st.nearest_id = id
				end
			end
		end
	end

	st.index = st.index + 1

	st.cstackcheck = nil

	return false
end

local function eval_stage_2(st,npc)
	if not (st.selected_id) then

		return false
	end

	local vo = level.object_by_id(st.selected_id)
	if (vo and vo:alive() and xr_wounded.is_wounded(vo)) then
		return true
	end

	if (st.selected_id) then
		if (db.storage[st.selected_id]) then
			db.storage[st.selected_id].wounded_already_selected = nil
		end

		st.selected_id = nil
	end
	st.vertex_id = nil
	st.vertex_position = nil

	st.stage = 1

	return false
end

local function eval_reset(st)
	if (st.selected_id and db.storage[st.selected_id]) then
		db.storage[st.selected_id].wounded_already_selected = nil
	end
	st.selected_id = nil
	st.vertex_id = nil
	st.vertex_position = nil
	st.stage = 1
	st.nearest_dist = nil
	st.nearest_vertex = nil
	st.nearest_position = nil
	st.nearest_id = nil
	st.index = 1
	return false
end

function evaluator_wounded_exist:evaluate()
	local npc = self.object
	if (not npc:alive() or self.a.help_wounded_enabled == false) then
		return eval_reset(self.a)
	end

	if (xr_wounded.is_wounded(npc)) then
		return eval_reset(self.a)
	end

	local vis = npc:get_visual_name()
	if (has_enemy(npc)) and (not HelpInCombat and not HelpInCombatVisuals[vis] or not HelpInCombat) then
		return eval_reset(self.a)
	end

	if (self.a.stage == 1) then
		return eval_stage_1(self.a,npc,vis) or false
	elseif (self.a.stage == 2) then
		return eval_stage_2(self.a,npc,vis) or false
	end

	return eval_reset(self.a)
end

----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_help_wounded" (action_base)
function action_help_wounded:__init (npc_name,action_name, storage) super (nil, action_name)
	self.a = storage
end
function action_help_wounded:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_path_type(game_object.level_path)
	--npc:set_dest_level_vertex_id(self.a.vertex_id)
	self.a.vertex_id = utils.send_to_nearest_accessible_vertex(npc, self.a.vertex_id,"xr_help_wounded")

	if (has_enemy(npc)) then
		state_mgr.set_state(npc, "sneak_run")
	else
		state_mgr.set_state(npc, "run")
	end

	db.storage[self.a.selected_id].wounded_already_selected = npc:id()
end



local function help_wounded_execute(npc,st)
	local state = state_mgr.get_state(npc)
	if (state == "help_victim_"..AnimCombat or state == "help_victim_"..AnimFree or state == "help_wounded") then
		return
	end

	--local dist = npc:position():distance_to(st.vertex_position)

	-- Stop helping victim if NPC is seen by best enemy
	local be = npc:best_enemy()
	--if (be and xr_wounded.is_wounded(be) ~= true and dist > AlwaysHelpDistance) then
	if (be and xr_wounded.is_wounded(be) ~= true) then
		if (be:see(npc)) then
			db.storage[st.selected_id].wounded_already_selected = nil
			st.stage = 1
			return
		end
	end

	if (npc:level_vertex_id() == st.vertex_id) then
		if (UseNewAnim) then
			if not (npc:object("medkit_script")) then
				alife():create("medkit_script",npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
			end

			if (has_enemy(npc)) then
				state_mgr.set_state(npc, "help_victim_"..AnimCombat)
			else
				state_mgr.set_state(npc, "help_victim_"..AnimFree)
			end
		else
			state_mgr.set_state(npc, "help_wounded")
		end
	else
		st.vertex_id = utils.send_to_nearest_accessible_vertex(npc, st.vertex_id)
		if (has_enemy(npc)) then
			state_mgr.set_state(npc, "sneak_run")
		else
			state_mgr.set_state(npc, "run")
		end
	end
end

function action_help_wounded:execute()
	help_wounded_execute(self.object,self.a)
	action_base.execute(self)
end

function action_help_wounded:finalize()
	state_mgr.set_state(self.object, "idle")
	local st = self.a
	if (st.selected_id and db.storage[st.selected_id]) then
		db.storage[st.selected_id].wounded_already_selected = nil
	end
	st.selected_id = nil
	st.vertex_id = nil
	st.vertex_position = nil
	st.stage = 1
	st.nearest_dist = nil
	st.nearest_vertex = nil
	st.nearest_position = nil
	st.nearest_id = nil
	st.index = 1

	if (self.object:object("medkit_script")) then
		alife():release( alife():object(self.object:object("medkit_script"):id()) , true )
	end
	action_base.finalize(self)
end



----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini, scheme, section, st)
	local manager = npc:motivation_action_manager()

	-- Evaluators
	if (character_community(npc) == "zombied" or npc:section() == "actor_visual_stalker") then
		manager:add_evaluator(xr_evaluators_id.wounded_exist,property_evaluator_const(false))
	else
		manager:add_evaluator (xr_evaluators_id.wounded_exist, evaluator_wounded_exist("wounded_exist", st))
	end

	local wp = world_property

	-- Actions
	local action = action_help_wounded (npc:name(),"action_help_wounded", st)
	action:add_precondition( wp(stalker_ids.property_alive, true) )
	action:add_precondition( wp(xr_evaluators_id.wounded_exist, true) )
	action:add_precondition( wp(stalker_ids.property_anomaly,false) )
	action:add_precondition( wp(xr_evaluators_id.sidor_wounded_base, false) )


	local vis = npc:get_visual_name()
	if (HelpInCombat == false and HelpInCombatVisuals[vis] == nil) then
		action:add_precondition( wp(stalker_ids.property_enemy,	false) )
		action:add_precondition( wp(stalker_ids.property_danger,false) )
	end

	action:add_effect( wp(xr_evaluators_id.wounded_exist, false) )
	--action:add_effect( wp(xr_evaluators_id.state_mgr + 4,false) )

	manager:add_action(xr_actions_id.wounded_exist, action)

	--action = manager:action(stalker_ids.action_danger_planner)
	--action:add_precondition( wp(properties["wounded_exist"],false) )

	if (HelpInCombat or HelpInCombatVisuals[vis]) then
		action = manager:action(stalker_ids.action_combat_planner)
		action:add_precondition( wp(xr_evaluators_id.wounded_exist,false) )

		--action = manager:action(xr_actions_id.state_mgr + 1)
		--action:add_precondition( wp(xr_evaluators_id.wounded_exist,false) )
	end

	local p = {
				xr_actions_id.alife,
				xr_actions_id.state_mgr + 2
	}
	for i=1,#p do
		action = manager:action(p[i])
		if (action) then
			action:add_precondition( wp(xr_evaluators_id.wounded_exist,false) )
		else
			alun_utils.printf("xr_help_wounded: no action id p[%s]",i)
		end
	end
end

function set_help_wounded(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end


function reset_help_wounded(npc, scheme, st, section)
	local t = db.storage[npc:id()]
	if not (t) then
		return
	end

	if not (t.help_wounded) then
		return
	end

	if (t.help_wounded.selected_id) then
		if (db.storage[t.help_wounded.selected_id]) then
			db.storage[t.help_wounded.selected_id].wounded_already_selected = nil
		end

		t.help_wounded.selected_id = nil
	end

	t.help_wounded.vertex_id = nil
	t.help_wounded.vertex_position = nil
	t.help_wounded.help_wounded_enabled = utils.cfg_get_bool(t.ini, section, "help_wounded_enabled", npc, false, true)
end


function is_under_help_wounded(npc)
	local mgr = npc:motivation_action_manager()

	if not mgr:initialized() then
		return false
	end

	local current_action_id = mgr:current_action_id()
	return  current_action_id == xr_actions_id.wounded_exist
end


