----------------------------------------------------------------
-- ui_sleep_dialog, reworked for Items refunct mod, Plaargath --
----------------------------------------------------------------

local sleep_control = nil
local wide = false
class "sleep_dialog" (CUIScriptWnd)
function sleep_dialog:__init() super()
	self:SetWndRect(Frect():set(0,0,1024,768))
	if(device().width/device().height>(1024/768+0.01)) then
		wide = true
	end
	self.xml = CScriptXmlInit() -- Plaargath
	self.xml:ParseFile("ui_sleep_dialog.xml")
	self.back = self.xml:InitStatic("background", self)
	self.sleep_static = self.xml:InitStatic("sleep_static", self.back)
	self.static_cover = self.xml:InitStatic("static_cover", self.back)
	self.caption_hint = self.xml:InitStatic("caption_hint", self)
	self.caption_info1 = self.xml:InitStatic("caption_info1", self)
	self.caption_info2 = self.xml:InitStatic("caption_info2", self)
	sleep_st_tbl = {}
	for i = 1, 24 do
		sleep_st_tbl[i] = self.xml:InitStatic("sleep_st_"..i, self.back)
	end
	self.time_track = self.xml:InitTrackBar("time_track", self.back)
	self:Register(self.time_track, "time_track")
	self.btn_sleep = self.xml:Init3tButton("btn_sleep", self.back)
	self:Register(self.btn_sleep, "btn_sleep")
	self.btn_cancel = self.xml:Init3tButton("btn_cancel", self.back)
	self:Register(self.btn_cancel, "btn_cancel")
	self.sleep_mb = CUIMessageBoxEx()
	self:Register(self.sleep_mb, "sleep_mb")
	self:AddCallback("btn_sleep", ui_events.BUTTON_CLICKED, self.OnButtonSleep, self)
	self:AddCallback("btn_cancel", ui_events.BUTTON_CLICKED, self.OnButtonCancel, self)
	self:AddCallback("sleep_mb", ui_events.MESSAGE_BOX_OK_CLICKED, self.OnMessageBoxOk, self)
	self:AddCallback("time_track", ui_events.WINDOW_LBUTTON_DB_CLICK, self.OnButtonSleep, self) -- Plaargath
end

function sleep_dialog:Initialize()
	local cur_hours = level.get_time_hours()

	-- legibility, captions, art rework - Items refunct mod, Plaargath
	for i = 1, 24 do
		sleep_st_tbl[i]:TextControl():SetText(i.."h")
	end

	-- UI background arts, captions
	self.caption_hint:TextControl():SetText(game.translate_string("st_sleep_hint_max"))
	self.caption_info1:TextControl():SetText(game.translate_string("st_sleep_hint_where"))
	local background_art = 1200

	local hideout = surge_manager.actor_in_cover()
	if hideout == true then
		self.caption_info2:TextControl():SetText(game.translate_string("st_sleep_hint_where_hideout"))
		background_art = 720
		t_zone_to_ui = {
			["zat_a2_sr_sleep"] = {
				["caption"] = game.translate_string("st_sleep_hint_where_zaton"),
				["art"] = 840 },
			["jup_a6_sr_sleep"] = {
				["caption"] = game.translate_string("st_sleep_hint_where_jupiter"),
				["art"] = 960 },
			["pri_a16_sr_sleep"] = {
				["caption"] = game.translate_string("st_sleep_hint_where_pripyat"),
				["art"] = 1080 }
			}
		for k,v in pairs(t_zone_to_ui) do
			if db.zone_by_name[k] then
				if db.zone_by_name[k]:inside(db.actor:position()) then
					background_art = v.art
					self.caption_info2:TextControl():SetText(v.caption)
				end
			end
		end
	else
		if sleep_control.sleepbag then
			self.caption_info2:TextControl():SetText(game.translate_string("st_sleep_hint_sb"))
			background_art = 0
		elseif sleep_control.nrc then
			self.caption_info2:TextControl():SetText(game.translate_string("st_sleep_hint_nrc"))
			background_art = 120
		elseif sleep_control.tent then
			self.caption_info2:TextControl():SetText(game.translate_string("st_sleep_hint_tent"))
			background_art = 240
		elseif sleep_control.tent_and_sb then
			self.caption_info2:TextControl():SetText(game.translate_string("st_sleep_hint_tent_sb"))
			background_art = 360
		elseif sleep_control.tent_and_nrc then
			self.caption_info2:TextControl():SetText(game.translate_string("st_sleep_hint_tent_nrc"))
			background_art = 480
		elseif sleep_control.tent_and_both then
			self.caption_info2:TextControl():SetText(game.translate_string("st_sleep_hint_tent_sb_nrc"))
			background_art = 600
		else
			self.caption_info2:TextControl():SetText("%c[0,200,100,100] (!) bug encountered: sleep_dialog:Initialize()")
		end
	end

	self.sleep_static:InitTexture("ui\\ui_actor_sleeparts")
	local r = Frect():set(0,background_art,591,background_art+118)
	self.sleep_static:SetTextureRect(r)
	local width = 591
	if (wide) then width = width*0.8 end
	self.sleep_static:SetWndSize(vector2():set(width, 118))
	-- end Plaargath
end

function sleep_dialog:TestAndShow()
	if(db.actor.bleeding>0 or db.actor.radiation>0 or xr_conditions.surge_started() == true) then
		self.sleep_mb:InitMessageBox("message_box_ok")
		if(db.actor.bleeding>0 and db.actor.radiation>0) then
			if (itms_manager) then
				itms_manager.show_message(game.translate_string("st_sleep_testandshow_medic"),25) --
				return
			end
			self.sleep_mb:SetText(game.translate_string("st_sleep_testandshow_ok")) --
		elseif(db.actor.bleeding>0) then
			if (itms_manager) then
				itms_manager.show_message(game.translate_string("st_sleep_testandshow_bleed"),25) --
				return
			end
			self.sleep_mb:SetText(game.translate_string("st_sleep_testandshow_hurt")) --
		elseif(surge_manager.get_surge_manager().started == true) then
			if (itms_manager) then
				itms_manager.show_message(game.translate_string("st_sleep_testandshow_surge"),30) --
				return
			end
			self.sleep_mb:SetText(game.translate_string("st_sleep_testandshow_bw")) --
		else
			if (itms_manager) then
				itms_manager.show_message(game.translate_string("st_sleep_testandshow_rad"),25) --
				return
			end
			self.sleep_mb:SetText(game.translate_string("st_sleep_testandshow_radh")) --
		end
		self.sleep_mb:ShowDialog(true)
	--[[
	elseif xr_logic.pstor_retrieve(db.actor,"drowse",0) < 0.2 then
		self.sleep_mb:InitMessageBox("message_box_ok")
		self.sleep_mb:SetText(game.translate_string("st_sleep_testandshow_not")) --
		self.sleep_mb:ShowDialog(true)
	--]]
	else
		self:Initialize()
		self:ShowDialog(true)
	end
end

function sleep_dialog:OnTrackButton()
end

function sleep_dialog:OnButtonSleep()
	if (itms_manager and self.sleepbag) then
		local sm = surge_manager.get_surge_manager()
		local safe
		local zone
		for i=1,#sm.covers do
			zone = sm.covers[i]
			if (zone and zone:inside(db.actor:position())) then
				safe = true
				break
			end
		end

		if not (safe) then
			if (xr_conditions.surge_started()) then
				if (itms_manager) then itms_manager.show_message(game.translate_string("st_sleep_testandshow_surge"),30) end --
				self:OnButtonCancel()
				return
			end

			local t = {"zat_a2_sr_no_assault","jup_a6_sr_no_assault","jup_b41_sr_no_assault"}

			for i=1,#t do
				zone = db.zone_by_name[t[i]]
				if (zone and zone:inside(db.actor:position())) then
					safe = true
					break
				end
			end
			itms_manager.sleep_actor_safe = safe or nil
		end
	end
	if self:IsShown() then
		self:HideDialog() -- Yasti: Crash Prevention from UP patch. Author = burguois
	end
	xr_effects.disable_ui(db.actor, nil)
	level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback")
	level.add_pp_effector("sleep_fade.ppe", 11, false)
	_G.mus_vol = get_console():get_float("snd_volume_music")
	_G.amb_vol = get_console():get_float("snd_volume_eff")
	get_console():execute("snd_volume_music 0")
	get_console():execute("snd_volume_eff 0")
	if (itms_manager.sleep_actor_safe) then
		surge_manager.resurrect_skip_message()
	end
	if sleep_control.forced then
		level.add_cam_effector("camera_effects\\surge_02.anm", 10, false, "ui_sleep_dialog.dream_callback")
	else
		level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback")
		get_console():execute("snd_volume_music 0")
		get_console():execute("snd_volume_eff 0")
	end
	level.add_pp_effector("surge_fade.ppe", 11, false)
	db.actor:give_info_portion("actor_is_sleeping")
end

function sleep_dialog:OnButtonCancel()
	self:HideDialog()
	db.actor:give_info_portion("tutorial_sleep")
	disable_info("sleep_active")
	if (itms_manager) then itms_manager.sleep_actor_not_safe = nil end
	self.sleepbag = nil
	if (self.ph_sleepbag_id and self.item_section) then
		alife():create(self.item_section,db.actor:position(),0,0,0)
		alife():release( alife():object(self.ph_sleepbag_id) )
		self.ph_sleepbag_id = nil
	end
	-- Items refunct mod, Plaargath
	if (self.ph_nrc_id and self.item_section) then
		alife():create(self.item_section,db.actor:position(),0,0,0)
		alife():release(alife():object(self.ph_nrc_id))
		self.ph_nrc_id = nil
	end
	sleep_control.item_section = nil
	sleep_control.sleepbag = nil
	sleep_control.ph_sleepbag_id = nil
	sleep_control.nrc = nil
	sleep_control.ph_nrc_id = nil
	sleep_control.tent = nil
	sleep_control.ph_tent_id = nil
	sleep_control.tent_and_sb = nil
	sleep_control.tent_and_nrc = nil
	sleep_control.tent_and_both = nil
	-- end Plaargath
end

function sleep_dialog:OnMessageBoxOk()
	db.actor:give_info_portion("tutorial_sleep")
	disable_info("sleep_active")
	if (itms_manager) then itms_manager.sleep_actor_safe = nil end
	self.sleepbag = nil
	if (self.ph_sleepbag_id and self.item_section) then
		alife():create(self.item_section,db.actor:position(),0,0,0)
		alife():release(alife():object(self.ph_sleepbag_id))
		self.ph_sleepbag_id = nil
	end
	-- Items refunct mod, Plaargath
	if (self.ph_nrc_id and self.item_section) then
		alife():create(self.item_section,db.actor:position(),0,0,0)
		alife():release(alife():object(self.ph_nrc_id))
		self.ph_nrc_id = nil
	end
	sleep_control.item_section = nil
	sleep_control.sleepbag = nil
	sleep_control.ph_sleepbag_id = nil
	sleep_control.nrc = nil
	sleep_control.ph_nrc_id = nil
	sleep_control.tent = nil
	sleep_control.ph_tent_id = nil
	sleep_control.tent_and_sb = nil
	sleep_control.tent_and_nrc = nil
	sleep_control.tent_and_both = nil
	-- end Plaargath
end

function sleep_dialog:OnKeyboard(dik, keyboard_action)
-- Plaargath input convenience addition
	if sleep_control.sleepbag or sleep_control.nrc or sleep_control.tent then
		local bind = dik_to_bind(dik)
		CUIScriptWnd.OnKeyboard(self,dik,keyboard_action)
		if (keyboard_action == ui_events.WINDOW_KEY_PRESSED) then
			if (bind == key_bindings.kUSE) then
				self:OnButtonSleep()
			elseif (dik ~= DIK_keys.MOUSE_1) then
				self:OnButtonCancel()
			end
		end
		return true
	else
		local bind = dik_to_bind(dik)
		if (dik == DIK_keys.DIK_RETURN) then
			self:OnButtonSleep()
		elseif (bind == key_bindings.kACCEL) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kBACK) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kCROUCH) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kDOWN) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kDROP) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kFWD) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kINVENTORY) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kJUMP) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kLEFT) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kL_LOOKOUT) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kL_STRAFE) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kNIGHT_VISION) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kQUIT) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_RELOAD) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kRIGHT) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kR_LOOKOUT) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kR_STRAFE) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kTORCH) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kUP) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_1) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_2) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_3) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_4) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_5) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_6) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_FUNC) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_NEXT) then
			self:OnButtonCancel()
		elseif (bind == key_bindings.kWPN_ZOOM) then
			self:OnButtonCancel()
		end
		return true
	end
end
--------------------------------------------------------------------------------
function dream_callback()
	if sleep_control.forced then
		level.add_cam_effector("camera_effects\\surge_01.anm", 10, false, "ui_sleep_dialog.dream_callback2")
	else
		level.add_cam_effector("camera_effects\\sleep.anm", 10, false, "ui_sleep_dialog.dream_callback2")
	end
	local in_cover = surge_manager.actor_in_cover()
	local hours = sleep_control.forced or sleep_control.time_track:GetIValue()
	local mins = 0
--	rx_ai.printf("sleep %s: %s hours",tostring(in_cover),hours)
	if not in_cover then
		local sm = surge_manager.get_surge_manager()
		local sde = game.get_game_time():diffSec(sm.last_surge_time)
		local stime = sde+hours*3600+600-sm._delta
		if stime > 0 then
			hours = hours-math.ceil(stime/3600)
--			rx_ai.printf("sleep:cut hours %s",hours)
		end
		if hours <= 0 then
			hours = 0
			mins = math.random(5,15)
		end
	end
	level.change_game_time(0,hours,mins)
	level_weathers.get_weather_manager():forced_weather_change()

	if (itms_manager.sleep_actor_safe) then
		surge_manager.get_surge_manager().time_forwarded = true
		if(surge_manager.is_started() and level_weathers.get_weather_manager().weather_fx) then
			level.stop_weather_fx()
	--		level_weathers.get_weather_manager():select_weather(true)
			level_weathers.get_weather_manager():forced_weather_change()
		end
	else
		surge_manager.get_surge_manager().skip_message = true
		if (math.random() < 0.025 * hours) then
			sleep_control.force_surge = true
		end
	end
	sleep_control.forced = nil
	db.actor.power = 1
    printf("dream_callback: time forwarded on [%d]", hours)
	if postproces_mod then
		postproces_mod.sleep_callback(hours,mins)
	end

	-- Items refunct mod, Plaargath
	if hours >= 1 then
		local penalty_tier, penalty_section
		local hours_to_penalty = math.ceil(hours)
		if hours_to_penalty > 24 then hours_to_penalty = 24 end
		if in_cover == false then
			if sleep_control.sleepbag then
				penalty_tier = "t1"
			elseif sleep_control.nrc then
				penalty_tier = "t1"
			elseif sleep_control.tent then
				penalty_tier = "t1"
			elseif sleep_control.tent_and_sb then
				penalty_tier = "t2"
			elseif sleep_control.tent_and_nrc then
				penalty_tier = "t2"
			elseif sleep_control.tent_and_both then
				penalty_tier = "t3"
			end
		elseif in_cover == true then
				penalty_tier = "t3"
		end
		if not penalty_tier then
			penalty_tier = "t1"
		end
		penalty_section = "sleep_"..penalty_tier.."_"..hours_to_penalty.."h"
		db.actor:eat(db.actor:object(penalty_section))
		alife():create(penalty_section,db.actor:position(),0,0,0)
	elseif hours < 1 then
		if minutes ~= 0 then
			db.actor:eat(db.actor:object("sleep_t3_1h"))
			alife():create("sleep_t3_1h",db.actor:position(),0,0,0)
			news_manager.send_tip(db.actor,game.translate_string("st_sleep_tip_short"),nil,nil,nil)
		end
	else
		news_manager.send_tip(db.actor,game.translate_string("st_sleep_tip_not_sleepy"),nil,nil,nil)
	end
	-- end Plaargath
end

function dream_callback2()
	xr_effects.enable_ui(db.actor, nil)
	get_console():execute("snd_volume_music "..tostring(_G.mus_vol))
	get_console():execute("snd_volume_eff "..tostring(_G.amb_vol))
	_G.amb_vol = 0
	_G.mus_vol = 0
	db.actor:give_info_portion("tutorial_sleep")
	disable_info("actor_is_sleeping")
	disable_info("sleep_active")
	if (itms_manager) then itms_manager.sleep_actor_safe = nil end
	if (sleep_control.force_surge) then
		surge_manager.start_surge(true)
		sleep_control.force_surge = nil
	end
	if (sleep_control.ph_sleepbag_id and sleep_control.item_section) then
		alife():create(sleep_control.item_section,db.actor:position(),0,0,0)
		alife():release( alife():object(sleep_control.ph_sleepbag_id) )
	end
	-- Items refunct mod, Plaargath
	if (sleep_control.ph_nrc_id and sleep_control.item_section) then
		alife():create(sleep_control.item_section,db.actor:position(),0,0,0)
		alife():release(alife():object(sleep_control.ph_nrc_id))
	end
	sleep_control.item_section = nil
	sleep_control.sleepbag = nil
	sleep_control.nrc = nil
	sleep_control.ph_nrc_id = nil
	sleep_control.ph_sleepbag_id = nil
	sleep_control.tent = nil
	sleep_control.ph_tent_id = nil
	sleep_control.tent_and_sb = nil
	sleep_control.tent_and_nrc = nil
	sleep_control.tent_and_both = nil
	-- end Plaargath
end

function sleep()
	if(sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = nil
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
end

function sleep_forced(hours)
	if(sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
	end
	sleep_control.forced = hours or math.random(3,9)
	sleep_control:OnButtonSleep()
end

function main()
	sleep()
end

function sleep_bag(ph_sleepbag_id,sec)
	if(sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
		sleep_control:Initialize()
	end
	sleep_control.item_section = sec
	sleep_control.sleepbag = true
	sleep_control.ph_sleepbag_id = ph_sleepbag_id
	-- Itms refunct mod, Plaargath
	sleep_control.nrc = nil
	sleep_control.ph_nrc_id = nil
	sleep_control.tent = nil
	sleep_control.ph_tent_id = nil
	sleep_control.tent_and_sb = nil
	sleep_control.tent_and_nrc = nil
	sleep_control.tent_and_both = nil
	-- end Plaargath
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
	give_info("sleep_active")
	return sleep_control
end

-- Items refunct mod, Plaargath
function sleep_in_nrc(ph_nrc_id,sec)
	if(sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
		sleep_control:Initialize()
	end
	sleep_control.item_section = sec
	sleep_control.sleepbag = nil
	sleep_control.ph_sleepbag_id = nil
	sleep_control.nrc = true
	sleep_control.ph_nrc_id = ph_nrc_id
	sleep_control.tent = nil
	sleep_control.ph_tent_id = nil
	sleep_control.tent_and_sb = nil
	sleep_control.tent_and_nrc = nil
	sleep_control.tent_and_both = nil
	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
	give_info("sleep_active")
	return sleep_control
end

function sleep_in_tent(ph_tent_id)
	if(sleep_control==nil) then
		sleep_control = ui_sleep_dialog.sleep_dialog()
		sleep_control:Initialize()
	end
	sleep_control.item_section = nil
	sleep_control.sleepbag = nil
	sleep_control.ph_sleepbag_id = nil
	sleep_control.nrc = nil
	sleep_control.ph_nrc_id = nil
	sleep_control.tent = true
	sleep_control.ph_tent_id = ph_tent_id
	sleep_control.tent_and_sb = nil
	sleep_control.tent_and_nrc = nil
	sleep_control.tent_and_both = nil

	if db.actor:object("itm_sleepbag") then
		sleep_control.tent = nil
		sleep_control.ph_tent_id = nil
		sleep_control.tent_and_sb = true
	end
	if db.actor:object("nrc_foil") then
		sleep_control.tent = nil
		sleep_control.ph_tent_id = nil
		sleep_control.tent_and_sb = nil
		sleep_control.tent_and_nrc = true
	end
	if db.actor:object("itm_sleepbag") then
		if db.actor:object("nrc_foil") then
			sleep_control.tent = nil
			sleep_control.ph_tent_id = nil
			sleep_control.tent_and_nrc = nil
			sleep_control.tent_and_both = true
		end
	end

	sleep_control.time_track:SetCurrentValue()
	sleep_control:TestAndShow()
	give_info("sleep_active")
	return sleep_control
end

-- end Plaargath